Item2、使用静态工厂方法生成对象优点：
（1）对相关签名的多个构造方法，可以更清楚的理解，使用不同的命名。
（2）不需要在每次调用时创建相同的对象。可以极大的提高性能。
（3）可以返回其类型的任意子类型。
(4)减少了创建参数化类型实例的灵活性

2、缺点
1、静态工厂方法很难与其他静态方法区分
2、没有公共或受保护的构造函数的类不能被子类化。

Item 3
3、当构造函数参数特别多时，使用建造者模式是一个好的选择。

Item 4
通过私有构造器来防止实例化

Item 5
避免创建不必要的对象

Item 6
消除无效的引用
1、每当一个类管理它自己的内存时，程序语法应该警惕内存泄漏。每当释放一个元素时，元素中包含的任何对象引用都应该被清除。

Item 7
避免终结器
1、使用终结器会导致严重的性能损失。
2、不保证迅速执行，是否执行
3、终结化过程中抛出一个未捕获的异常，对象的终结将会终止，未捕获的异常使对象损坏，另一个线程试图使用这样一个损坏的对象，可能会导致任意的不确定性行为
4、使用显示的终止方法，不需要时调用就好了。私有字段记录是否有效。

Item 8
重写equals方法时遵守相等的公约
1、不要重写equals方法依赖不可靠的方法
2、重写高质量equals方法的要点：
    参数对象如果与当前对象==，直接返回true
    使用instanceof 检查参数类型
    使用instanceof 检查参数是否有正确的类型
    参数类型转换
    每个重要字段检查是否匹配

Item 9
重写equals 方法后必须重写hashCode方法
    不相等的对象，应该有不同的hashcode
    不要试图从哈希代码计算中排除对象重要部分来提升性能

Item 10
总是重写toString方法
1、应该包含该对象的所有有用信息


























clarity
使用api实现的类是api的客户端
用api实现的程序是api的用户